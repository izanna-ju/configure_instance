version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name juliusStack-${CIRCLE_WORKFLOW_ID:0:5}
jobs:
  # upload_file:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo "THIS IS A SAMPLE TEXT" > ~/output.txt  
  #     - persist_to_workspace:
  #         root: ~/
  #         paths: 
  #           - output.txt  

  # download_file:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - attach_workspace:
  #         at: ~/
  #     - run: cat ~/output.txt 
 
  # Exercise: Infrastructure Creation
  # Exercise - Rollback

  # create-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Create Cloudformation Stack Command"
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file template.yml \
  #           --stack-name juliusStack-${CIRCLE_WORKFLOW_ID:0:5} \
  #           --region us-east-1 
  
  # configure-infrastructure:
  #   docker:
  #     - image: cimg/python:3.10
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["cc:3f:bd:62:22:5b:05:02:02:73:58:c4:84:44:f7:a4"]
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           pip3 install ansible
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: | 
  #           ansible-playbook -i inventory.txt main-remote.yml

  create-and-deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:5} \
            --parameter-overrides MyBucketName="izannabucket-$CIRCLE_WORKFLOW_ID:0:5}"
      # - run: aws s3 sync . s3://izannabucket-$CIRCLE_WORKFLOW_ID:0:5} --delete

  get-last-deployment-id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt
    
  promote-to-production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="izannabucket-${CIRCLE_WORKFLOW_ID:0:5}"
    
  clean-up-old-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous s3 bucket and cloudformation stack
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

  # smoke-test:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - run:
  #         name: smoke test
  #         command: |
  #           return 1
  #     - destroy_environment

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  infrastructure-workflow:
    jobs:
      # - upload_file
      # - download_file:
      #     requires: [upload_file]
      # - create-infrastructure
      # - configure-infrastructure
      # - smoke-test:
      #     requires:
      #       - create-infrastructure
      - create-and-deploy-frontend
      - promote-to-production:
          requires:
            - create-and-deploy-frontend
      - get-last-deployment-id
      - clean-up-old-frontend:
          requires:
            - get-last-deployment-id
            - promote-to-production